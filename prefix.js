const fs = require('fs');
const engine = require('php-parser');

const parser = new engine({
  parser: {
    extractDoc: true,
    php7: true
  },
  ast: {
    withPositions: true
  }
});

if (fs.existsSync('./vendor/guzzlehttp/psr7/vendor-bin')) fs.rmSync('./vendor/guzzlehttp/psr7/vendor-bin', { recursive: true });
if (fs.existsSync('./vendor/intervention/image/.github')) fs.rmSync('./vendor/intervention/image/.github', { recursive: true });

//vendor/intervention/image/.github
function getFiles(dir, files_) {
  files_ = files_ || [];
  const files = fs.readdirSync(dir);
  for (const i in files) {
    const name = `${dir}/${files[i]}`;
    if (fs.statSync(name).isDirectory()){
      getFiles(name, files_);
    } else {
      files_.push(name);
    }
  }
  return files_;
}

const collection = [];
const allPHPFiles = getFiles('./vendor');
allPHPFiles.forEach(function(file) {
  if (
    file.endsWith('.md') ||
    file.endsWith('.json') ||
    file.endsWith('.yml') ||
    file.endsWith('.gitignore')
    ) {
    fs.rmSync(file);
    return;
  }

  if (file.endsWith('.php')) {
    // Patch some files
    // sprintf('Ttc\Intervention\\Image\\%s\\Driver', $drivername);
    // $classnameLocal = sprintf('\Ttc\Intervention\Image\%s\Commands\%sCommand', $drivername, ucfirst($name));
    // $classnameGlobal = sprintf('\Ttc\Intervention\Image\Commands\%sCommand', ucfirst($name));
    let fileContent = fs.readFileSync(file, 'utf8');
    if (
      /Intervention\\\\Image\\\\%s\\\\Driver/.test(fileContent) ||
      /Intervention\\Image\\%s\\Commands\\%sCommand/.test(fileContent)
     ) {
       console.log('hey')
      fileContent = fileContent.replace(/'Intervention\\\\Image\\\\%s\\\\Driver'/gm, "'Ttc\\\\Intervention\\\\Image\\\\%s\\\\Driver'");
      fileContent = fileContent.replace(/'\\Intervention\\Image\\%s\\Commands\\%sCommand'/gm, "'\\Ttc\\Intervention\\Image\\%s\\Commands\\%sCommand'");
      fileContent = fileContent.replace(/'\\Intervention\\Image\\Commands\\%sCommand'/gm, "'\\Ttc\\Intervention\\Image\\Commands\\%sCommand'");

      fs.writeFileSync(file, fileContent, 'utf8');
     }


    const fileAST = parser.parseCode(fileContent);
    if (
      fileAST
      && fileAST.children
      && fileAST.children.length > 0
      && fileAST.children[0].kind === 'namespace'
      && !['Composer\\Autoload', 'Composer', ].includes(fileAST.children[0].name)
      && !collection.includes(fileAST.children[0].name)
      ) {
        collection.push({ [fileAST.children[0].name]: file.replace('./', '/') })
    }
  }
});

let text = `
<?php

// autoload_classmap.php @generated by Composer

$vendorDir = dirname(__DIR__);
$baseDir = dirname($vendorDir);

return array(
  'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
`;
  collection.forEach(name => {
  text += `  '${Object.keys(name)[0]}' => $vendorDir . '${Object.values(name)[0]}',
`;
  });

  text += `
);
`;

fs.writeFileSync('./vendor/composer/autoload_classmap.php', text);
